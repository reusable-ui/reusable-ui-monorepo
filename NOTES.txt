css namespaces: -------------------------------------------------------------------------



// reusable-ui configs:
packages                        VAR     CFG
@reusable-ui/colors             -       col  col-p
@reusable-ui/borders            -       bor  bor-r     // UPDATED
@reusable-ui/spacers            -       spc
@reusable-ui/breakpoints        -       brp
@reusable-ui/typos              -       ""



// reusable-ui utilities:
@reusable-ui/accessibilities    -       -
@reusable-ui/validations        -       -



// reusable-ui features:
@reusable-ui/background         bg      -   // UPDATED
@reusable-ui/foreground         fg      -   // UPDATED
@reusable-ui/border             bd      -   // UPDATED
@reusable-ui/ring               ri      -   // UPDATED
@reusable-ui/animation          an      -   // UPDATED
@reusable-ui/padding            pd      -   // UPDATED



// reusable-ui capabilities:
@reusable-ui/groupable          gr      -   // UPDATED



// reusable-ui variants:
@reusable-ui/orientationable    -       -
@reusable-ui/resizable          -       -
@reusable-ui/themeable          th      -   // UPDATED
@reusable-ui/gradientable       gd      -   // UPDATED
@reusable-ui/outlineable        ol      -   // UPDATED
@reusable-ui/mildable           mi      -   // UPDATED
@reusable-ui/nudible            nu      -   // UPDATED
@reusable-ui/basic-variants     -       -



// reusable-ui states:
@reusable-ui/excitable          ex  // UPDATED              PEER: shared in config of [filter]                                                                  , register [anim, filter]
@reusable-ui/collapsible        co  // UPDATED              NO_PEER: no shared variables                                                                        , register [anim]
@reusable-ui/scrollable             // no private vars      NO_PEER: no shared variables                                                                        , no_register
@reusable-ui/disableable        di  // UPDATED              PEER: shared in config of [filter]                                                                  , register [anim, filter]
@reusable-ui/activatable        ac  // UPDATED              PEER: shared in config of [filter] + supports for usesActiveAsClick()                               , register [anim, filter]
@reusable-ui/focusable          fo  // UPDATED              PEER: shared in config of [boxShadow]                                                               , register [anim, boxShadow]
@reusable-ui/interactable       in  // UPDATED              PEER: shared in config of [filter]                                                                  , register [anim, filter]
@reusable-ui/clickable          cl  // UPDATED              PEER: shared in config of [filter] + supports for usesActiveAsClick()                               , register [anim, filter]
@reusable-ui/invalidable        iv  // UPDATED              NO_PEER: no shared variables                                                                        , register [animValid, animInvalid]
@reusable-ui/active-as-click    ak  // only private vars    NO_PEER: no shared variables                                                                        , no_register
@reusable-ui/checkable          ch  // only private vars    PEER: shared in config of [filterIn, filterOut, transformIn, transformOut, filter, transform, anim] , no_register
@reusable-ui/validation-icon    vi  // only private vars    PEER: shared in CssStyle of [iconImage]                                                             , no_register



=========================================================================================



depends on :has() :

ifFocusing
ifBlurred
ifFocus
ifBlur
ifFocusBlurring

ifArriving
ifLeaved
ifArrive
ifLeave
ifArriveLeaving



(ifFocusing|ifBlurred|ifFocus|ifBlur|ifFocusBlurring|ifArriving|ifLeaved|ifArrive|ifLeave|ifArriveLeaving)



# = already referenced

// reusable-ui states:
    usesFocusable
        usesControlStates
            #
    usesInteractable
        usesControlStates
            #

// base-components:
    usesControlStates
        <Control>
        usesActionControlStates
            <ActionControl>
            usesEditableActionControlStates
                #
            usesButtonStates
                <Button>
                usesButtonIconStates
                    <ButtonIcon>
                usesHamburgerMenuButtonStates
                    #
            usesListActionItemStates
                #
        usesEditableControlStates
            <EditableControl>
            usesRangeStates
                <Range>
            usesEditableActionControlStates
                <EditableActionControl>
                usesCheckStates
                    <Check>
                    usesRadioStates
                        <Radio>
            usesEditableTextControlStates
                #
    usesEditableTextControlStates
        <EditableTextControl>
        usesInputStates
            <Input>

// simple-components:
    usesButtonGhostVariant
        usesButtonVariants
            <Button>
            usesButtonIconVariants
                <ButtonIcon>
            usesHamburgerMenuButtonVariants
                <HamburgerMenuButton>
    usesHamburgerMenuButtonStates
        <HamburgerMenuButton>

// layout-components:
    usesListActionItemStates
        <ListActionItem>



// list of components that depens on :has() :
<Control>
    <ActionControl>
        <Button>
            <ButtonIcon>
            <HamburgerMenuButton>
        <ListActionItem>
    <EditableControl>
        <Range>
        <EditableActionControl>
            <Check>
                <Radio>
    <EditableTextControl>
        <Input>



=========================================================================================



ifGradient|ifNotGradient|ifInheritGradient|ifOutlined|ifNotOutlined|ifInheritOutlined|ifMild|ifNotMild|ifInheritMild



ifGradient|ifNotGradient|ifInheritGradient

------------------------------------------------------------------------------------

ifOutlined|ifNotOutlined|ifInheritOutlined

outlined = true (Semi nude)
1. <Carousel> > <Navscroll> // outlined bullet
2. <Busy>                   // makes bold_color spinner (currentColor)

outlined = false (Regular)
0. <-- none -->

outlined = inherit
0. <-- none -->

------------------------------------------------------------------------------------

ifMild|ifNotMild|ifInheritMild

mild = true (Smooth)
1. <Indicator>           // for indicating purpose
2. <EditableTextControl> // for text friendly
3. <Container>           // for content friendly
4. <Content>             // for content friendly
5. <Label>               // for text friendly
6. <Alert>               // for text friendly => smoothing <Popup> => <Basic>
7. <Tooltip>             // for text friendly => smoothing <Popup> => <Basic>

mild = false (Bold)
1. <Group> // cancel out List => Indicator => true => false
2. <Range> // to calculate the mildAlternate

mild = inherit(<Parent> dependent)
1. <CloseButton> => the icon color depends on <Parent>
2. <ProgressBar> => dependent of <Progress>
3. (Regular|Action)<ListItem> => dependent of <List>

------------------------------------------------------------------------------------

ifNude|ifNotNude

nude = true (backgroundless & borderless)
1. <ModalCard> > <Popup> // invisible_container for <Card>
2. <Check>               // borderless checkbox
3. <CloseButton>         // borderless close button
4. <Range>               // borderless range
5. <Busy>                // borderless spinner

nude = false
0. <-- none -->

nude = inherit
0. <-- none -->


=========================================================================================


do need (inherit)?Active:
    Indicator
    Control
    ActionControl
    EditableControl
    EditableActionControl

    Button
    ButtonIcon
    HamburgerMenuButton + onActiveChange

    Check
    Radio

    Card
    List

not need (inherit)?Active:
    EditableTextControl (hidden feature)
    ToggleButton + onActiveChange
    NavButton
    CloseButton


=========================================================================================


do need (inherit)Readonly:
    Indicator (hidden feature)
    Control (hidden feature)
    EditableControl
    EditableTextControl
    EditableActionControl
    Check
    Radio
    Input
    Range

not need (inherit)Readonly:
    ActionControl
    Button
    ButtonIcon
    ToggleButton
    HamburgerMenuButton
    NavButton
    CloseButton
    
    Card (hidden feature)
    List (hidden feature)


=========================================================================================


do need (inherit)?Enabled:
    Indicator
    Control
    ActionControl
    EditableControl
    EditableTextControl
    EditableActionControl

    Button
    ButtonIcon
    HamburgerMenuButton
    ToggleButton
    NavButton
    CloseButton

    Check
    Radio
    Input
    Range

    Card
    List

not need (inherit)?Enabled:
    <none>


=========================================================================================

// list of <Component>s that directly/indirectly implements collapsible

features:                                                                      [expanded]     [on(Expand|Collapse)(Start|End)]   callback [onExpandedChange]       internal state [defaultExpanded]

<Navbar>			    desc: ---no_desc---					                CollapsibleProps		---not_implemented---       -------not_implemented------        --------not_implemented-------
<TabPanel>			    desc: ---no_desc---					                CollapsibleProps		CollapsibleEventProps       -------not_implemented------        --------not_implemented-------
<Popup>			        desc: <Badge><Busy><Alert><Tooltip><ModalCard>	    CollapsibleProps		CollapsibleEventProps       -------not_implemented------        --------not_implemented-------
<Collapse>		        desc: <ModalSide><Dropdown>				            CollapsibleProps		CollapsibleEventProps       -------not_implemented------        --------not_implemented-------

<Alert>			        desc: ---no_desc---                                 CollapsibleProps*		CollapsibleEventProps*      ControllableCollapsibleProps        --------not_implemented-------
<Tooltip>               desc: ---no_desc---                                 CollapsibleProps*		CollapsibleEventProps*      -------not_implemented------        --------not_implemented-------

<Dropdown>		        desc: <DropdownList><DropdownButton><DDLB>	        CollapsibleProps*		CollapsibleEventProps*		ControllableCollapsibleProps        --------not_implemented-------
<DropdownList>		    desc: <DropdownListButton>				            CollapsibleProps**	    CollapsibleEventProps**		ControllableCollapsibleProps*       --------not_implemented-------
<DropdownButton>	    desc: <DropdownListButton>				            CollapsibleProps**	    CollapsibleEventProps**		ControllableCollapsibleProps*		UncontrollableCollapsibleProps
<DropdownListButton>    desc: ---no_desc---					                CollapsibleProps***     CollapsibleEventProps***	ControllableCollapsibleProps**      UncontrollableCollapsibleProps*

<Modal>			        desc: <ModalCard><ModalSide>					    CollapsibleProps	    CollapsibleEventProps       ControllableCollapsibleProps        --------not_implemented-------
<ModalCard>             desc: ---no_desc---					                CollapsibleProps*	    CollapsibleEventProps*      ControllableCollapsibleProps*       --------not_implemented-------
<ModalSide>             desc: ---no_desc---					                CollapsibleProps*	    CollapsibleEventProps*      ControllableCollapsibleProps*       --------not_implemented-------

<AccordionItem>	        base: <ListItem>                                    CollapsibleProps        CollapsibleEventProps       ControllableCollapsibleProps        UncontrollableCollapsibleProps
<Details>			    base: <Basic>                                       CollapsibleProps        CollapsibleEventProps       ControllableCollapsibleProps        UncontrollableCollapsibleProps


=========================================================================================

// list of <Component>s that made up from <Content|usesContent :


<Masonry>		baseComponent		styles
<Form>		baseComponent		styles
<Carousel>		basicComponent		styles

<List>						styles.content
<Details>						styles.content
<Label>						styles.content

<Card>						styles (base2)
<Alert>						styles (base2)

<TabBody>		bodyComponent


=========================================================================================

// list of <Component>s that made up from <Container|usesContainer :

<Navbar>		basicComponent		styles


=========================================================================================

<Carousel> teleport distance:

                           straight vs  next_tele vs  prev_tele
                           --------     =========     ~~~~~~~~~

012345601234560123456      [4-2]=2  vs  7-4+2=5   vs  7-2+4=9
         --#=====
  ~~~~~~~~~#


012345601234560123456      [5-2]=3  vs  7-5+2=4   vs  7-2+5=10
         ---#====
  ~~~~~~~~~~#

012345601234560123456      [6-2]=4  vs  7-6+2=3   vs  7-2+6=11
         ----#===
  ~~~~~~~~~~~#


012345601234560123456      [1-6]=5  vs  7-1+6=12  vs  7-6+1=2
       =#-----
      ~~#============


=========================================================================================


Components with children mutation:


      Component         |                           Purpose                           |           Ignore Nullish
----------------------------------------------------------------------------------------------------------------------

<Content                    mutate <a> => <Button buttonStyle='link'>
<Accordion>                 mutate default [lazy] of children
<Pagination>                mutate to limited children                                      ignores nullish children to easily count the number of pages
<Progress>                  mutate to reversed children & calculate for `restValueRatio`
<Busy>                      calculate for autoLabel                                         ignores nullish children to easily count the number of valid children
<Badge>                     calculate for autoExpanded                                      ignores nullish children to easily count the number of valid children
<DropdownList>              calculate for  semanticRole of 'dialog'|'menu'

<Carousel>                  wrap with <li>                                                  ignores nullish children to easily count the number of slides
<Tab>                       wrap with <ListItemWithState> & <TabPanelWithState>

<ExclusiveAccordion>        wrap with <AccordionItemWithState>

<Group>                     wrap with <GroupItem>
<Navscroll>                 wrap with <ListItemWithNavigation>, downgrade to <Nav>
<List>                      wrap with <WrapperItem>                                         ignores nullish children to easily count the number of <ListItem>s
<DropdownList>              wrap with <ListItemWithExpandedHandler>

<ResponsiveProvider>        wrap with <ChildWithRef>



no need to flatten the children:

<ElementWithMaybeLink>      mutate to mergedChildren, detect the presence of <Link> to be a <WrapperLink>
<Button>                                              detect the presence of <Link> for [tag] & [role]
navigations                                           detect the presence of <Link> for [href] / [to]


=========================================================================================


elm selector exports:

// base-components:
    <EditableTextControl>:
        iconElm                         = '::after'

// simple-components:
    <Input>:
        inputElm                        = ':where(:first-child)'
    
    <Check>:
        dummyElm                        = '::before'
        inputElm                        = ':where(:first-child)'
        checkElm                        = '::before'
        labelElm                        = ':where(:nth-child(1n+2))'
    
    <Range>:
        inputElm                        = ':where(:first-child)'
        trackElm                        = '.track'
        trackLowerElm                   = '.tracklower'
        trackUpperElm                   = '.trackupper'
        thumbElm                        = '.thumb'
    
    <HamburgerMenuButton>:
        svgElm                          = ':where(svg)'

// layout-components:
    <List>:
        wrapperElm                      = '*'
        listItemElm                     = ':where(:first-child)'
        horzRuleElm                     = ':where(hr)'
    
    <Card>:
        headerElm                       = '.header'
        footerElm                       = '.footer'
        bodyElm                         = '.body'

// notification-components:
    <Alert>:
        iconElm                         = '.icon'                           EXPLICITLY EXPORTED
        bodyElm                         = ':where(.body)'                   EXPLICITLY EXPORTED
        controlElm                      = '.control'                        EXPLICITLY EXPORTED
    
    <Tooltip>:
        arrowElm                        = '.arrow'

// dialog-components:
    <Modal>:
        noParentScrollElm               = '.noParentScroll'
        noParentScrollDummyChildElm     = '::before'

// composite-components:
    <Carousel>:
        listElm                         = ':where(.list)'                   EXPLICITLY EXPORTED
        dummyListElm                    = '.dummy'                          EXPLICITLY EXPORTED
        itemElm                         = '*'                               EXPLICITLY EXPORTED
        prevBtnElm                      = '.prevBtn'                        EXPLICITLY EXPORTED
        nextBtnElm                      = '.nextBtn'                        EXPLICITLY EXPORTED
        navElm                          = '.nav'                            EXPLICITLY EXPORTED
    
    <Details>:
        itemElm                         = ':nth-child(n)'
    
    <Navbar>:
        logoElm                         = '.logo'
        togglerElm                      = '.toggler'
        listElm                         = '.list'
        menuElm                         = ':is(.menu, ...)
    
    <Tab>:
        tabHeaderElm                    = '.tabHeader'
        tabBodyElm                      = '.tabBody'
        tabPanelElm                     = '.tabPanel'


=========================================================================================


contexts:
    Accessibility               value={propAccess}>
    Validation                  value={propValidation}>
    
    ExclusiveAccordionState     value={exclusiveAccordionState}
    TabState                    value={tabState}
    
    DialogMessageApi            value={dialogMessageApi}
    Responsive(State)           value={responsiveState}


=========================================================================================

components based on <Collapse>

// menu-components:
@reusable-ui/collapse               fixed: the default width : `100%`        ; height : `fit-content`
@reusable-ui/dropdown               fixed: the default width : `fit-content` ; height : `fit-content`
@reusable-ui/dropdown-button        same as <Dropdown>, not having css
@reusable-ui/dropdown-list          same as <Dropdown>, having css for modifying the <List>
@reusable-ui/dropdown-list-button   same as <DropdownList>, not having css

// dialog-components:
@reusable-ui/modal                  NOT based on <Collapse>
@reusable-ui/modal-card             NOT based on <Collapse>
@reusable-ui/modal-side             fixed: the default width : `fit-content` (inline**) -or- `100%` (block**) ; height: `100%` (inline**) -or- `fit-content` (block**)

// composite-components:
@reusable-ui/accordion              fixed: the default width : `fit-content` (inline) -or- `100%` (block) ; height: `100%` (inline) -or- `fit-content` (block)
@reusable-ui/exclusive-accordion    same as <Accordion>, not having css
@reusable-ui/tab                    NOT based on <Collapse>
@reusable-ui/navbar                 fixed: the default width : `fit-content` (desktop) -or- `fill-available` (mobile) ; height: `fill-available` (desktop) -or- `fit-content` (mobile)
@reusable-ui/details                fixed: the default width : `100%` ; height: `fit-content`


=========================================================================================

List of components that directly/indirectly implements InvalidableProps & useInvalidable:

-------------------------------------------------------------------
    CONTROLS                     |    VALIDATION PROPS
-------------------------------------------------------------------
invalidable                      |
    EditableControl              |    required
        EditableTextControl      |    minLength, maxLength
            Input                |    min, max, step, pattern, type        wrapper of EditableTextControl
        EditableActionControl    |    -
            Check                |    -                                    wrapper of EditableActionControl
                Radio            |    -
        Range                    |    min, max, step                       wrapper of EditableControl
    EditableButton               |    -
    Form                         |    -
